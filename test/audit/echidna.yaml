
testMode: "assertion"
# testMode: "optimization"
deployContracts: [["0x2f", "Float128"],["0x1f","Ln"]]
cryticArgs: ["--compile-libraries=(Float128,0x2f),(Ln,0x1f)"]
shrinkLimit: 200000
workers: 4
corpusDir: "crytic-export/corpus"
# seqLen: 1
# symExec: true
filterBlacklist: false
# filterFunctions: ["BasicMath.test_digits(uint256)"]

# filterFunctions: ["BasicMath.test_exchange_add(int256,int256,int256,int256,int256,int256)"]
# filterFunctions: ["BasicMath.test_simple_exchange_add(int256,int256,int256,int256)"]
# filterFunctions: ["BasicMath.test_sub_add_equalitiy(int256,int256,int256,int256)"]
filterFunctions: ["BasicMath.test_exchange_sub(int256,int256,int256,int256,int256,int256)"]

# filterFunctions: ["BasicMath.test_exchange_mul(int256,int256,int256,int256,int256,int256)"]
# filterFunctions: ["BasicMath.test_simple_exchange_mul(int256,int256,int256,int256)"]

# filterFunctions: ["BasicMath.test_revert_division(int256,int256)"]
# filterFunctions: ["BasicMath.test_divided_by1(int256,int256)"]
# filterFunctions: ["BasicMath.test_exchangeOne_division(int256,int256,int256,int256)"]
# filterFunctions: ["BasicMath.test_exchange_division(int256,int256,int256,int256,int256,int256)"]
# filterFunctions: ["BasicMath.echidna_opt_err"]
# filterFunctions: ["BasicMath.test_div_commutative(int256,int256,int256,int256)"]
# filterFunctions: ["BasicMath.test_div_comparison(int256,int256,int256)"] 


# filterFunctions: ["BasicMath.test_comparison(int256,int256,int256,int256)"]
# filterFunctions: ["BasicMath.test_add_one(int256,int256)"]

# filterFunctions: ["BasicMath.test_neverRevert_sqrt(int256,int256)"]
# filterFunctions: ["BasicMath.test_sqrt(int256,int256)"]
# filterFunctions: ["BasicMath.getSqrtNumber(int256,int256)"]


# filterFunctions: ["BasicMath.test_ln_add(int256,int256,int256,int256)"]
# filterFunctions: ["BasicMath.test_ln_power(int256,int256)"]